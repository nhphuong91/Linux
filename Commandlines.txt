Create file
-----------------------------------------------------------------------
touch <file>.<ext>
-----------------------------------------------------------------------

Quickly view content of file
-----------------------------------------------------------------------
cat <OPTION> <FILE>
-----------------------------------------------------------------------

Create directory
-----------------------------------------------------------------------
mkdir -p <path>/<target dir>
-p: self-create parent dir if not existed
-----------------------------------------------------------------------

Remove directory
-----------------------------------------------------------------------
rm -rf <target dir>
-r: recursive
-f: forced
-----------------------------------------------------------------------

Move to directory
-----------------------------------------------------------------------
cd <target dir>

# Move to home
cd ~

# Move out
cd ..

# Move back to previous dir
cd -
-----------------------------------------------------------------------

Copy all (forced + recursive)
-----------------------------------------------------------------------
cp -fr [source] [dest]
-----------------------------------------------------------------------

Edit text file
-----------------------------------------------------------------------
sudo vi <file> //if user doesn't have file editing permissions

# For inserting
Press i //Do required editing

# For exiting
Press Esc
    :wq //for exiting and saving
    :q! //for exiting without saving
-----------------------------------------------------------------------

All about access permission
-----------------------------------------------------------------------
# View access permission:
ls -l --> view long list of contents

# Format:
-rwx---rwx -> divided into 4 parts:
_ -: file(-) or dir(d) or link(l)
_ rwx: owner permissions - read(r) or write(w) or executable(x) or non(-)
_ ---: group
_ rwx: other users

# Change access permission:
_ for owner: chmod <add(+) or remove(-)><w/r/x> <file/dir>
_ for group: chmod g+wrx <file/dir>
_ for others: chmod o+r <file/dir>
_ for all:  chmod ugo/a+rx <file/dir>

# Extra: replace <+/-><w/r/x> by below numeric code
    0 = ---
    1 = --x
    2 = -w-
    3 = -wx
    4 = r-
    5 = r-x
    6 = rw-
    7 = rwx
-> ex: chmod 777 <file/dir> => give wrx permission for all users

# Change owner/group of file/dir:
_ change group: chgrp <group> <file/dir>
_ change owner: chown <user> <file/dir>
_ change both: chown <user>:<group> <file/dir>

# References:
https://help.ubuntu.com/community/FilePermissions
https://www.pluralsight.com/blog/it-ops/linux-file-permissions
-----------------------------------------------------------------------

Make file executable
-----------------------------------------------------------------------
chmod +x <file>
-----------------------------------------------------------------------

Switch between virtual console (tty)
-----------------------------------------------------------------------
sudo chvt x (x = 1 to 6)

# to check tty# & which user is logging in it
who
-----------------------------------------------------------------------

Kill X server = Stop lightdm/gdm/kdm 
-----------------------------------------------------------------------
# To stop:
sudo service gdm stop (or use lightdm or kdm instead)
or
sudo systemctl stop gdm

# To start/restart:
sudo service gdm start/restart
or
sudo systemctl start/restart gdm
or
startx
-----------------------------------------------------------------------

To solve error with Nouveau
-----------------------------------------------------------------------
sudo update-initramfs -u
-----------------------------------------------------------------------

Install dkms and build-essential
-----------------------------------------------------------------------
sudo apt-get install build-essential dkms
# Unnecessary for newly installed OS
-----------------------------------------------------------------------

Check for opengl version
-----------------------------------------------------------------------
sudo apt install mesa-utils
glxinfo | 
"OpenGL version"
glxinfo | grep '^direct rendering:'
-----------------------------------------------------------------------

Check for installed dkms kernel module
-----------------------------------------------------------------------
dkms status
-----------------------------------------------------------------------

All about gcc
-----------------------------------------------------------------------
Install:
sudo apt-get install gcc-8 g++-8

Having gcc redirected automatically to gcc-8:
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8

Set default:
sudo update-alternatives --config gcc
-----------------------------------------------------------------------

Ctrl+C: To stop current jobs (put it to background process)
top: View running processes
htop: Better tool to view running processes
ps -A: list of running processes
jobs: view suspended jobs


Check for gcc ver which is used to compile linux kernel
-----------------------------------------------------------------------
cat /proc/version
-----------------------------------------------------------------------

Add PPA launchpad driver
-----------------------------------------------------------------------
sudo add-apt-repository ppa:graphics-drivers/ppa

Remove:
sudo add-apt-repository --remove ppa:graphics-drivers/ppa
-----------------------------------------------------------------------

Check for openCV version
-----------------------------------------------------------------------
pkg-config --modversion opencv
or
/usr/bin/opencv_version
-----------------------------------------------------------------------

Check for ROS version
-----------------------------------------------------------------------
rosversion -d
-----------------------------------------------------------------------

Check for Python version
-----------------------------------------------------------------------
List installed python:
ls /usr/bin/python*

View version:
For python2: 
$ /usr/bin/python -V
OR
/usr/bin/python --version

For python3: 
$ /usr/bin/python3 -V
OR
/usr/bin/python3 --version
-----------------------------------------------------------------------

Check for connected camera
-----------------------------------------------------------------------
ls -ltrh /dev/video*
-----------------------------------------------------------------------

Check for USB dev
-----------------------------------------------------------------------
lsusb
or
ls -l /dev | grep ttyUSB ->> used to detect Arduino
-----------------------------------------------------------------------

Add user to group
-----------------------------------------------------------------------
sudo usermod -a -G [group] [user]
-----------------------------------------------------------------------

Check for connected devices with open port 22
-----------------------------------------------------------------------
sudo nmap -sS -p 22 192.168.0.0/24
_ /24: first 24 bits are masked (192.168.0) = subnet 255.255.255.0
_ /16: first 16 bits are masked (192.168) = subnet 255.255.0.0
_ the rest (unmasked) bits is host
-----------------------------------------------------------------------

Check for open port of target devices 
-----------------------------------------------------------------------
sudo nmap -sS 192.168.x.x
-----------------------------------------------------------------------

Sync time between different machines
-----------------------------------------------------------------------
Check time different:
ntpdate -q [client ip]

Restart chrony:
service chrony restart

Tracking:
chronyc tracking

View sources list:
chronyc sources -v

Check client list:
sudo chronyc clients

Other:
systemctl enable chronyd.service
systemctl start chronyd.service
-----------------------------------------------------------------------

View system time
-----------------------------------------------------------------------
timedatectl
-----------------------------------------------------------------------

Fix arduino shortcut
-----------------------------------------------------------------------
sudo chown YourUserName /path/to/icon/arduino-arduinoide.desktop
-----------------------------------------------------------------------

List all files/dir
-----------------------------------------------------------------------
files:
find "$PWD" -type f

dir:
find "$PWD" -type d

all
find "$PWD"
-----------------------------------------------------------------------

List disk
-----------------------------------------------------------------------
sudo lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL
sudo fdisk -l
-----------------------------------------------------------------------

Mount partitions
-----------------------------------------------------------------------
sudo mount /dev/sdb1 /media/SSD

additinal options:
-o rw,norecovery
-----------------------------------------------------------------------

View cmd attached to alias
-----------------------------------------------------------------------
type [alias]
or
alias ->> display all active alias
-----------------------------------------------------------------------

Scan for serial connection
-----------------------------------------------------------------------
dmesg | egrep --color 'serial|ttyS'
-----------------------------------------------------------------------

Bring up wireless devices
-----------------------------------------------------------------------
sudo ifconfig wlan0 up
-----------------------------------------------------------------------

Add network drive/directory
-----------------------------------------------------------------------
sftp://nvidia@192.168.0.107/media/nvidia/SSD
-----------------------------------------------------------------------

Install .deb pkg in terminal
-----------------------------------------------------------------------
sudo dpkg --install <pkg.deb>
or
sudo dpkg -i <pkg.deb>
-----------------------------------------------------------------------

Backup disk
-----------------------------------------------------------------------
sudo dd if=/dev/sdb of=~/SDCardBackup.img
-----------------------------------------------------------------------

Change to root user
-----------------------------------------------------------------------
sudo -i
-----------------------------------------------------------------------

Check file system consistency
-----------------------------------------------------------------------
dosfsck /dev/sdb
-----------------------------------------------------------------------

View mainboard info
-----------------------------------------------------------------------
sudo dmidecode -t baseboard
or
sudo dmidecode -t 2
-----------------------------------------------------------------------

Search for apt package
-----------------------------------------------------------------------
apt-cache search <pkg name>*
or
apt-cache policy <pkg name>*
-----------------------------------------------------------------------

Get author description about cmd in terminal
-----------------------------------------------------------------------
man <cmd>
Ex: man sudo
-----------------------------------------------------------------------

Get estimate file space usage
-----------------------------------------------------------------------
du <option> <files>
Ex: du -hd1
-d, –max-depth=N : print total for directory only if it is N or fewer levels below command line argument
-h, –human-readable : print sizes in human readable format
-----------------------------------------------------------------------

pipe output from "this" to input of "that"
-----------------------------------------------------------------------
Use "|"
Ex: du -hd1 | sort -rh | head -10
~ du_stdout =>> sort->sort_stdout =>> head->head_stdout
-----------------------------------------------------------------------

Modify screen resolution
-----------------------------------------------------------------------
Show list of monitors and their connectivity:
xrandr --listmonitors
or
xrandr    -> show all connectivities & their available settings

Scale output res by 1.2
xrandr --output eDP-1-1 --transform 1.2,0,0,0,1.2,0,0,0,1
-----------------------------------------------------------------------

Get data from/to server
-----------------------------------------------------------------------
curl <options> <link to server contents>
-----------------------------------------------------------------------

Create symlink
-----------------------------------------------------------------------
ln -s <target/source path> <dest path>
-----------------------------------------------------------------------

View max pipe buffer size
-----------------------------------------------------------------------
cat  /proc/sys/fs/pipe-max-size
-----------------------------------------------------------------------

Determine current version of kernel
-----------------------------------------------------------------------
uname -a
uname -r
-----------------------------------------------------------------------

Install the headers for the running kernel
-----------------------------------------------------------------------
sudo apt-get install linux-headers-$(uname -r)
-----------------------------------------------------------------------

View graphic interfaces
-----------------------------------------------------------------------
lspci -k | grep VGA
sudo lshw -c video
-----------------------------------------------------------------------

Get online dir/files
-----------------------------------------------------------------------
wget -r -np -R "index.html*" -P <link to saved dir> <link to taget dir/file>

params:
-P <link to saved dir> or --directory-prefix=<link to saved dir>: save content to target dir
-np or --no-parent: Not recursively download content in parent dir
-R or --reject "index.html*": Reject any file like <that>
-r or --recursive: recursive retreiving
-nH or --no-host-directories: Disable generation of host-prefixed directories
--cut-dirs=<number>: Ignore number directory components (top down)
-l <depth> or --level=depth: Specify recursion maximum depth level depth
-----------------------------------------------------------------------

Extract .zip/tar/tgz file
-----------------------------------------------------------------------
tar -xvzf <file>
-----------------------------------------------------------------------

Filter out output list
-----------------------------------------------------------------------
add { | grep <target name>} after command
-----------------------------------------------------------------------

Create initial ramdisk images for preloading modules (initrd)
-----------------------------------------------------------------------
dracut
-----------------------------------------------------------------------

Generate ramdisk (initframfs)
-----------------------------------------------------------------------
dracut /boot/initramfs-$(uname -r).img $(uname -r)
-----------------------------------------------------------------------

Rebuild grub
-----------------------------------------------------------------------
sudo grub-mkconfig -o <Output file>[/boot/efi/EFI/centos/grub.cfg]
-----------------------------------------------------------------------

Control all services
-----------------------------------------------------------------------
use systemctl or service 

View stats/stop/start/restart/enable/dissable:
sudo systemctl <options> <svc>
-----------------------------------------------------------------------

View users info
-----------------------------------------------------------------------
w
who
users
-----------------------------------------------------------------------

View listening port
-----------------------------------------------------------------------
ss -tulwn
netstat -nat | grep LISTEN
-----------------------------------------------------------------------



