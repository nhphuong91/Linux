https://nvie.com/posts/a-successful-git-branching-model/
https://www.atlassian.com/git/tutorials/

Get git repo
-----------------------------------------------------------------------
git clone https://github.com/nhphuong91/Linux.git

Useful options:
--depth=1 -> useful for git with long commit history (ex: tensorflow, opencv...)
--bare -> repo that can only be pushed or pulled from, no direct edit
-----------------------------------------------------------------------

Initialize git
-----------------------------------------------------------------------
git init <dir>

Useful options: --bare/--templates=<path to tpl dir>
-----------------------------------------------------------------------

Stage changes
-----------------------------------------------------------------------
git add <dir/file>
or 
git stage <dir/file> => preferred

Useful options: -p (choose portions of a file to add to the next commit)
-----------------------------------------------------------------------

Commit changes
-----------------------------------------------------------------------
git commit -am "<descriptive msg>"
or 
git commit -m "<descriptive msg>"

Useful options: --amend (append current staged changes to previous commit)
-----------------------------------------------------------------------

Revert commits
-----------------------------------------------------------------------
Undo all commits after <commit> (set the current branch head to <commit>), preserving changes locally:
git reset <commit>

Discards all history and changes back to the specified commit:
git reset --hard <commit>

Useful options:
git reset <options> <commit>

options: hard/mixed/soft/merge/keep
-----------------------------------------------------------------------

Branches
-----------------------------------------------------------------------
view current branch + all local branches:
git branch

Create new branch:
git branch <name>

switch branch:
git checkout <branch name>

Merg branch:
git merge <branch> =>> ~ pull request

Delete branch:
git branch -d <name>

Rename branch:
git branch -m <oldname> <newname> -> to rename other branch
or 
git branch -m <newname> -> to rename current branch

Get remote branch & switch local branch to it:
git checkout --track origin/<remote_branch>
-----------------------------------------------------------------------

Synchronize changes
-----------------------------------------------------------------------
Downloads all history from the remote tracking branches:
git fetch

Uploads all local branch commits:
git push => ~assume: git push origin master

Upload to target branch/folder:
git push -u <remote git/branch> <local git/branch>
-> -u: upstream

Updates your current local working branch:
git pull
-----------------------------------------------------------------------

Create a new repository
-----------------------------------------------------------------------
git clone git@gitlab.tma.com.vn:tic/camera-box.git
cd camera-box
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master
-----------------------------------------------------------------------

Push an existing folder
-----------------------------------------------------------------------
cd existing_folder
git init
git remote add origin git@gitlab.tma.com.vn:tic/camera-box.git
git add .
git commit -m "Initial commit"
git push -u origin master
-----------------------------------------------------------------------

Push an existing Git repository
-----------------------------------------------------------------------
cd existing_repo
git remote rename origin old-origin
git remote add origin git@gitlab.tma.com.vn:tic/camera-box.git
git push -u origin --all
git push -u origin --tags -> update tags only to remote repo
-----------------------------------------------------------------------

Tag a commit
-----------------------------------------------------------------------
Step 1: git tag -a <tag_name> -m "<message>" -> tag current active branch & current commit
	or
	git tag -a <tag_name> <commit_sha> -m "message" -> tag target commit

Step 2:
git push --tags
-----------------------------------------------------------------------

Config git
-----------------------------------------------------------------------
git config <scope> <config>

<scope>: --local/--global/--system
<config>: user/format/gui/core/color...

ex:
git config --global user.name "nhphuong91"
git config --global user.email "nhp12345@gmail.com"
-----------------------------------------------------------------------

Create alias (shortcut)
-----------------------------------------------------------------------
git config --globall alias.<shortkey> <cmd>
-----------------------------------------------------------------------


