Config sftp & ssh
-----------------------------------------------------------------------
Config ssh:
sudo apt install openssh-server
sudo systemctl enable ssh.service
-----------------------------------------------------------------------
Config sftp -> only use when it not works after ssh setup is done:
sudo nano /etc/ssh/sshd_config
_ comment out line: "Subsystem      sftp    /usr/lib/openssh/sftp-server"
_ add: "Subsystem sftp internal-sftp"
_ add: 
	"Match Group sftp_users
	X11Forwarding no
	AllowTcpForwarding yes
	ChrootDirectory /"
_ save
sudo systemctl restart ssh.service
sudo groupadd sftp_users
sudo usermod -aG sftp_users <user>
-----------------------------------------------------------------------


Auto mount
-----------------------------------------------------------------------
sudo vi /etc/fstab

add: <file system>  <mount point>   <type>  <options>   <dump>  <pass>
ex1: UUID=921356de       none         swap      sw         0       0
ex2: UUID=921356de       /dev/sda1    ext4   defaults      0       1
-----------------------------------------------------------------------

Add SSH key to git
-----------------------------------------------------------------------
Step 1: Generating a new SSH key pair
ssh-keygen -t ed25519 -C "<email@example.com>"
or
ssh-keygen -t rsa -b 4096 -C "<email@example.com>"

Step 2: Choose path & add protected password if necessary
Note: To edit use "ssh-keygen -p -f <keyname>"

Step 3: Adding an SSH key to your Git account (github, GitLab...)
Copy content of <key file>.pub located in ~/.ssh/ (id_rsa.pub or id_ed25519.pub)
or "cat ~/.ssh/<id_ed25519>.pub | clip"
Paste to "add ssh key" field on git account setting

Step 4: Verify
ssh -T git@<git domain>

Troubleshoot:
If not work after step 4, re-cloning git repo using ssh link
or
Edit git remote url from http to ssh link (git@...)
-----------------------------------------------------------------------

Import ssh private/public ssh key to other computer
-----------------------------------------------------------------------
Step 1: Copy private/public key file to ~/.ssh/

Step 2: Change permission of key file
chown <user name>:<user group> ~/.ssh/id_rsa* -> maybe unnecessary
chmod 600 ~/.ssh/id_rsa
chmod 644 ~/.ssh/id_rsa.pub

Step 3: Add key
ssh-add
If error "Could not open a connection to your authentication agent", run:
eval "$(ssh-agent)"

Step 4: Verify
ssh -T git@<git domain>
-----------------------------------------------------------------------

Removing ssh key
-----------------------------------------------------------------------
Step 1: Remove all or specify which key id to remove
ssh-add
or
ssh-add -f <path to file>

Step 2: Delete corresponding key file in ~/.ssh/
-----------------------------------------------------------------------

Signing git commits with GPG
-----------------------------------------------------------------------
Step 1: Generate the private/public key pair
gpg --full-gen-key
or
gpg2 --full-gen-key

Step 2: Follow  instructions to config: algorithm, key length, validity period, username, 
					email (verified on git account), protected password

Step 3: List the private GPG key
gpg --list-secret-keys --keyid-format LONG <your_email>

Step 4: Copy the GPG key ID that starts with "sec <hash type>/"
ex: sec   rsa4096/30F2B65B9246B6CA -> 30F2B65B9246B6CA

Step 5: Export public key & add to GPG field in git account setting
gpg --export --armor <key ID>

Step 6: Associating your GPG key with Git
Add key 
git config --<global/local> user.signingkey <key ID>

Export private key to copy to other machine
gpg --export-secret-keys --armor <key ID> > <private key name>.key
or
gpg --export-secret-keys --armor --output=<private key name>.key <key ID>

Import private key in another computer
gpg --import <private key name>.key
gpg --edit-key <key ID> trust quit
# enter 5<RETURN> (I trust ultimately)
# enter y<RETURN> (Really set this key to ultimate trust - Yes)

Auto sign
git config --<global/local> commit.gpgsign true

Troubleshoot:
If gpg not available, use "git config --global gpg.program gpg2"
-----------------------------------------------------------------------

Switch OS from ubuntu to CentOS
-----------------------------------------------------------------------
grub-reboot 2
reboot
-----------------------------------------------------------------------

Switch OS from CentOS to ubuntu (Ubuntu installed after CentOS)
-----------------------------------------------------------------------
mount /dev/sdb2 /media/mntdrive
grub2-editenv /media/mntdrive/boot/grub/grubenv set next_entry=0

reboot

after entering Ubuntu:
grub-editenv - unset next_entry
-----------------------------------------------------------------------

NOTE:
CentOS uses grub2 while Ubuntu uses grub

Remote to Ubuntu using VNC (= set automatic login)
-----------------------------------------------------------------------
Edit file "/etc/gdm3/custom.conf"
Uncomment "AutomaticLoginEnable" & "AutomaticLogin"
Set "AutomaticLogin" to usaged user account
reboot
-----------------------------------------------------------------------

Fix "nvidia persistence daemon failed"
-----------------------------------------------------------------------
sudo apt --fix-broken install
-----------------------------------------------------------------------

Desktop-remote stuff
-----------------------------------------------------------------------
Enable X11 forward:
_ Uncomment and set "ForwardAgent" & "ForwardX11" to "yes" -> then restart ssh service
_ To fix error with git commit, add the line to before "Host *"
Host github.com
   ForwardAgent no
   ForwardX11 no

Fix "unsupported security type" - VNC remote to Vino-server:
_ gsettings org.gnome.Vino require-encryption false
-----------------------------------------------------------------------
