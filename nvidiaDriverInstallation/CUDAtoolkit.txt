Source https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html
Download http://developer.nvidia.com/cuda-downloads

Pre-installation Actions
-----------------------------------------------------------------------
Disable the Nouveau drivers:
_ Create a file at /etc/modprobe.d/blacklist-nouveau.conf with the following contents:
blacklist nouveau
options nouveau modeset=0
_ Regenerate the kernel initramfs:
sudo update-initramfs -u

Install nvidia driver

Download & Calculate the MD5 checksum of the downloaded file:
md5sum <file>

Install kernel headers and development packages for the currently running kernel:
sudo apt-get install linux-headers-$(uname -r)

Uninstall a Toolkit runfile installation:
sudo /usr/local/cuda-X.Y/bin/uninstall_cuda_X.Y.pl

Uninstall a Driver runfile installation:
sudo /usr/bin/nvidia-uninstall

Uninstall a RPM/Deb installation:
sudo apt-get --purge remove <package_name>
<package_name>: cuda-repo-ubuntu1804-11-0-local_11.0.3-450.51.06-1_amd64.deb
-----------------------------------------------------------------------

Debian Installer:
-----------------------------------------------------------------------
Install repository meta-data:
sudo dpkg -i cuda-repo-<distro>_<version>_<architecture>.deb
<distro>: ubuntu1804
<version>: 10-1 or 11-0...
<architecture>: amd64 or x86_64

Installing the CUDA public GPG key:
_ When installing using the local repo:
sudo apt-key add /var/cuda-repo-<version>/7fa2af80.pub
_When installing using network repo:
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/<distro>/<architecture>/7fa2af80.pub
or
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/<distro>/<architecture>/7fa2af80.pub

sudo apt-get update
sudo apt-get install cuda

Set up the development environment by modifying the PATH and LD_LIBRARY_PATH variables:
_ Create symlink from /usr/local/cuda to /usr/local/cuda-<version> (rm existing symlink cuda if necessary)
sudo ln -s /usr/local/cuda-<version> /usr/local/cuda
_ Method 1: Using .bashrc
 + Add these lines to ~/.bashrc & restart terminal
export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda/lib64\
                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
or, add /usr/local/cuda-<version>/lib64 to /etc/ld.so.conf.d/<cuda>.conf and run ldconfig as root

_ Method 2: Using /etc/ld.so.conf.d/<cuda>.conf & /etc/profile.d/<cuda>.sh => for CentOS (the same with installing TensorRT)
 + Add file <cuda>.sh to /etc/profile.d/ for configuring PATH env var
  - add below content to .sh file
if [ -d "/usr/local/cuda/bin/" ]; then
    pathmunge /usr/local/cuda/bin
    pathmunge /usr/local/cuda/nsight-compute-2019.5.0
fi
 + Add file <cuda>.conf to /etc/ld.so.conf.d/ then run `sudo ldconfig` for configuring LD_LIBRARY_PATH env var
  - Content of .conf file is the path only: /usr/local/cuda/lib64
-----------------------------------------------------------------------

Runfile Installer:
-----------------------------------------------------------------------
Runfile Installer:
sudo sh cuda_<version>_linux.run --silent

Create an xorg.conf file to use the NVIDIA GPU for display:
sudo nvidia-xconfig

Modifying the PATH and LD_LIBRARY_PATH variables as in DEB installation instruction
-----------------------------------------------------------------------

To remove CUDA Toolkit: 
sudo apt-get --purge remove "*cublas*" "cuda*"

To remove NVIDIA Drivers: 
sudo apt-get --purge remove "*nvidia*"
